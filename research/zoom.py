# Generated by usbrply
# cmd: /usr/local/bin/usbrply --device-hi --sleep --wrapper --comment --setup -p captures/zoom.pcapng

import binascii
import time
import usb1


def validate_read(expected, actual, msg):
    if expected != actual:
        print('Failed %s' % msg)
        print('  Expected; %s' % binascii.hexlify(expected,))
        print('  Actual:   %s' % binascii.hexlify(actual,))
        #raise Exception('failed validate: %s' % msg)


def replay(dev):
    def bulkRead(endpoint, length, timeout=None):
        return dev.bulkRead(endpoint, length, timeout=(1000 if timeout is None else timeout))

    def bulkWrite(endpoint, data, timeout=None):
        dev.bulkWrite(endpoint, data, timeout=(1000 if timeout is None else timeout))
    
    def controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                    timeout=None):
        return dev.controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                    timeout=(1000 if timeout is None else timeout))

    def controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                     timeout=None):
        dev.controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                     timeout=(1000 if timeout is None else timeout))

    def interruptRead(endpoint, size, timeout=None):
        return dev.interruptRead(endpoint, size,
                    timeout=(1000 if timeout is None else timeout))

    def interruptWrite(endpoint, data, timeout=None):
        dev.interruptWrite(endpoint, data, timeout=(1000 if timeout is None else timeout))

    # Generated by usbrply
    # Source: Linux pcap (usbmon)
    # cmd: /usr/local/bin/usbrply --device-hi --sleep --wrapper --comment --setup -p captures/zoom.pcapng
    # PCapGen device hi: selected device 5
    # Generated from packet 1/2
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 1/2")
    time.sleep(0.003)
    # Generated from packet 3/4
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 3/4")
    time.sleep(3.342)
    # Generated from packet 5/6
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 5/6")
    time.sleep(0.005)
    # Generated from packet 7/8
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 7/8")
    time.sleep(0.001)
    # Generated from packet 9/10
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x0A\x00")
    time.sleep(0.510)
    # Generated from packet 11/12
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x03\x00")
    time.sleep(2.234)
    # Generated from packet 13/14
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x03\x00")
    time.sleep(0.177)
    # Generated from packet 15/16
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x04\x00")
    time.sleep(0.109)
    # Generated from packet 17/18
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x11\x00")
    time.sleep(0.124)
    # Generated from packet 19/20
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x18\x00")
    time.sleep(0.107)
    # Generated from packet 21/22
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x25\x00")
    time.sleep(0.077)
    # Generated from packet 23/24
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 23/24")
    time.sleep(0.003)
    # Generated from packet 25/26
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 25/26")
    time.sleep(0.037)
    # Generated from packet 27/28
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x3A\x00")
    time.sleep(0.098)
    # Generated from packet 29/30
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x4E\x00")
    time.sleep(0.114)
    # Generated from packet 31/32
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x59\x00")
    time.sleep(0.661)
    # Generated from packet 33/34
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x5B\x00")
    time.sleep(0.102)
    # Generated from packet 35/36
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x51\x00")
    time.sleep(0.107)
    # Generated from packet 37/38
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x45\x00")
    time.sleep(0.111)
    # Generated from packet 39/40
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x31\x00")
    time.sleep(0.108)
    # Generated from packet 41/42
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x22\x00")
    time.sleep(0.109)
    # Generated from packet 43/44
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x16\x00")
    time.sleep(0.109)
    # Generated from packet 45/46
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x08\x00")
    time.sleep(0.123)
    # Generated from packet 47/48
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x03\x00")
    time.sleep(0.581)
    # Generated from packet 49/50
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x01\x00")
    time.sleep(0.111)
    # Generated from packet 51/52
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x2B\x00")
    time.sleep(0.110)
    # Generated from packet 53/54
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x34\x00")
    time.sleep(0.109)
    # Generated from packet 55/56
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x3E\x00")
    time.sleep(0.116)
    # Generated from packet 57/58
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x4C\x00")
    time.sleep(0.101)
    # Generated from packet 59/60
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x64\x00")
    time.sleep(0.549)
    # Generated from packet 61/62
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x61\x00")
    time.sleep(0.011)
    # Generated from packet 63/64
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 63/64")
    time.sleep(0.003)
    # Generated from packet 65/66
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 65/66")
    time.sleep(0.096)
    # Generated from packet 67/68
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x45\x00")
    time.sleep(0.109)
    # Generated from packet 69/70
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x22\x00")
    time.sleep(0.110)
    # Generated from packet 71/72
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x0E\x00")
    time.sleep(0.117)
    # Generated from packet 73/74
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x02\x00")
    time.sleep(0.305)
    # Generated from packet 75/76
    # CLEAR_FEATURE (0x01): 0xB00 (unknown)
    controlWrite(0x21, 0x01, 0x0B00, 0x0100, b"\x00\x00")
    # PcapGen: generated 77 packets
    # PcapGen device filter: dropped 0 / 77 packets

def open_dev(usbcontext=None):
    if usbcontext is None:
        usbcontext = usb1.USBContext()
    
    print('Scanning for devices...')
    for udev in usbcontext.getDeviceList(skip_on_error=True):
        vid = udev.getVendorID()
        pid = udev.getProductID()
        if (vid, pid) == (0x0000, 0x0000):
            print("")
            print("")
            print('Found device')
            print('Bus %03i Device %03i: ID %04x:%04x' % (
                udev.getBusNumber(),
                udev.getDeviceAddress(),
                vid,
                pid))
            return udev.open()
    raise Exception("Failed to find a device")

if __name__ == "__main__":
    import argparse 
    
    parser = argparse.ArgumentParser(description='Replay captured USB packets')
    args = parser.parse_args()

    usbcontext = usb1.USBContext()
    dev = open_dev(usbcontext)
    dev.claimInterface(0)
    dev.resetDevice()
    replay(dev)


