# Generated by usbrply
# cmd: /usr/local/bin/usbrply --device-hi --sleep --wrapper --comment --setup -p captures/idle2.pcapng

import binascii
import time
import usb1


def validate_read(expected, actual, msg):
    if expected != actual:
        print('Failed %s' % msg)
        print('  Expected; %s' % binascii.hexlify(expected,))
        print('  Actual:   %s' % binascii.hexlify(actual,))
        #raise Exception('failed validate: %s' % msg)


def replay(dev):
    def bulkRead(endpoint, length, timeout=None):
        return dev.bulkRead(endpoint, length, timeout=(1000 if timeout is None else timeout))

    def bulkWrite(endpoint, data, timeout=None):
        dev.bulkWrite(endpoint, data, timeout=(1000 if timeout is None else timeout))
    
    def controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                    timeout=None):
        return dev.controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                    timeout=(1000 if timeout is None else timeout))

    def controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                     timeout=None):
        dev.controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                     timeout=(1000 if timeout is None else timeout))

    def interruptRead(endpoint, size, timeout=None):
        return dev.interruptRead(endpoint, size,
                    timeout=(1000 if timeout is None else timeout))

    def interruptWrite(endpoint, data, timeout=None):
        dev.interruptWrite(endpoint, data, timeout=(1000 if timeout is None else timeout))

    # Generated by usbrply
    # Source: Linux pcap (usbmon)
    # cmd: /usr/local/bin/usbrply --device-hi --sleep --wrapper --comment --setup -p captures/idle2.pcapng
    # PCapGen device hi: selected device 5
    # Generated from packet 1/2
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 1/2")
    time.sleep(0.003)
    # Generated from packet 3/4
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 3/4")
    time.sleep(3.308)
    # Generated from packet 5/6
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 5/6")
    time.sleep(0.003)
    # Generated from packet 7/8
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 7/8")
    time.sleep(3.320)
    # Generated from packet 9/10
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 9/10")
    time.sleep(0.003)
    # Generated from packet 11/12
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 11/12")
    time.sleep(3.254)
    # Generated from packet 13/14
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 13/14")
    time.sleep(0.003)
    # Generated from packet 15/16
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 15/16")
    time.sleep(3.153)
    # Generated from packet 17/18
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 17/18")
    time.sleep(0.005)
    # Generated from packet 19/20
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 19/20")
    time.sleep(3.202)
    # Generated from packet 21/22
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 21/22")
    time.sleep(0.003)
    # Generated from packet 23/24
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 23/24")
    time.sleep(3.254)
    # Generated from packet 25/26
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 25/26")
    time.sleep(0.003)
    # Generated from packet 27/28
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 27/28")
    time.sleep(3.169)
    # Generated from packet 29/30
    buff = controlRead(0xA1, 0x85, 0x0600, 0x0A00, 2)
    validate_read(b"\x3C\x00", buff, "packet 29/30")
    time.sleep(0.003)
    # Generated from packet 31/32
    buff = controlRead(0xA1, 0x81, 0x0600, 0x0A00, 60)
    validate_read(b"\x00\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", buff, "packet 31/32")
    # PcapGen: generated 33 packets
    # PcapGen device filter: dropped 0 / 33 packets

def open_dev(usbcontext=None):
    if usbcontext is None:
        usbcontext = usb1.USBContext()
    
    print('Scanning for devices...')
    for udev in usbcontext.getDeviceList(skip_on_error=True):
        vid = udev.getVendorID()
        pid = udev.getProductID()
        if (vid, pid) == (0x0000, 0x0000):
            print("")
            print("")
            print('Found device')
            print('Bus %03i Device %03i: ID %04x:%04x' % (
                udev.getBusNumber(),
                udev.getDeviceAddress(),
                vid,
                pid))
            return udev.open()
    raise Exception("Failed to find a device")

if __name__ == "__main__":
    import argparse 
    
    parser = argparse.ArgumentParser(description='Replay captured USB packets')
    args = parser.parse_args()

    usbcontext = usb1.USBContext()
    dev = open_dev(usbcontext)
    dev.claimInterface(0)
    dev.resetDevice()
    replay(dev)


